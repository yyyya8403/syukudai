<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>宿題管理</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f0f0f0;
            margin: 0;
            padding: 0;
        }
        header {
            background-color: #333;
            color: white;
            padding: 1rem;
            text-align: center;
        }
        main {
            margin: 2rem auto;
            width: 90%;
            max-width: 600px;
        }
        .hidden {
            display: none;
        }
        .container {
            background-color: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            position: relative; /* ログアウトボタンを右上に配置するため */
        }
        .container .logout-button {
            position: absolute;
            top: -140px;
            right: -320px;
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px ;
            width: 100px;
            border-radius: 4px;
            cursor: pointer;
        }
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }
        input[type="text"], input[type="date"], input[type="password"], button {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border-radius: 4px;
            border: 1px solid #ddd;
        }
/* ボタンの基本スタイル */
button {
    position: relative;
    overflow: hidden; /* 擬似要素がボタンからはみ出さないようにする */
    background-color: #4CAF50; /* ボタンの背景色 */
    color: white; /* ボタンの文字色 */
    cursor: pointer;
    border: 2px solid #4CAF50; /* ボタンの枠 */
    border-radius: 4px;
    padding: 0.75rem;
    transition: color 0.3s ease, background-color 0.3s ease, border-color 0.3s ease;
    font-size: 16px; /* フォントサイズの調整 */
}

/* 擬似要素でアニメーション用の背景を作成 */
button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.3); /* 背景色のスライド効果 */
    transition: left 0.3s ease;
    z-index: 0; /* ボタンのテキストの後ろに表示する */
}

/* ボタンのテキストが擬似要素の上に表示されるようにする */
button span {
    position: relative;
    z-index: 1;
}

/* ホバー時のスタイル */
button:hover::before {
    left: 100%;
}

/* ホバー時のスタイルでボタンの色を反転し、枠の色も変更 */
button:hover {
    background-color: white; /* ホバー時の背景色 */
    color: #4CAF50; /* ホバー時の文字色 */
    border-color: #4CAF50; /* ホバー時の枠の色 */
}


        .assignment-list ul {
            list-style-type: none;
            padding: 0;
        }
        .assignment-list li {
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        button.disabled {
    background-color: #ddd;
    cursor: not-allowed;
    color: #666;
}

    </style>
    
</head>
<body>

<header>
    <h1>宿題管理</h1>
</header>

<main>
    <!-- ログイン画面 -->
    <div id="login" class="container hidden">
        <h2>ログイン</h2>
        <form id="loginForm">
            <label for="password">パスワード:</label>
            <input type="password" id="password" required>
            <button type="submit">管理画面にログイン</button>
        </form>
        <button id="goToUserPage">ユーザー画面に移動</button>
    </div>

    <!-- 管理画面 -->
    <div id="admin" class="container hidden">
        <h2>管理画面</h2>
        <button id="logoutAdmin" class="logout-button">ログアウト</button>
        <form id="assignmentForm">
            <label for="assignmentName">宿題の内容:</label>
            <input type="text" id="assignmentName" required>
            <label for="dueDate">期限:</label>
            <input type="date" id="dueDate" required>
            <button type="submit">宿題を追加</button>
        </form>
        <div class="submitted-assignments">
            <h2>提出された宿題</h2>
            <ul id="submittedList"></ul>
        </div>
    </div>
    <!-- ユーザー画面 -->
    <div id="user" class="container hidden">
        <h2>ユーザー画面</h2>
        <button id="logoutUser" class="logout-button">ログアウト</button>
        <div class="input-area">
            <h3>ユーザー番号を入力</h3>
            <form id="userNumberForm">
                <label for="userNumber">番号:</label>
                <input type="text" id="userNumber" required>
                <button type="submit">送信</button>
            </form>
        </div>
        <div class="assignment-list" id="assignmentList" style="display: none;">
            <h2>宿題リスト</h2>
            <ul id="assignments"></ul>
        </div>
    </div>
</main>

<script>


    // ユーザー画面に直接アクセスするためのボタン処理
    const goToUserPage = document.getElementById('goToUserPage');
    goToUserPage.addEventListener('click', function() {
        document.getElementById('login').classList.add('hidden');
        document.getElementById('user').classList.remove('hidden');
    });

    // ローカルストレージからデータを取得する関数
    function getLocalStorage(name) {
        const data = localStorage.getItem(name);
        return data ? JSON.parse(data) : null;
    }

    // ローカルストレージにデータを設定する関数
    function setLocalStorage(name, value) {
        localStorage.setItem(name, JSON.stringify(value));
    }

    // ローカルストレージからデータを消す関数
    function eraseLocalStorage(name) {
        localStorage.removeItem(name);
    }

    // ページが読み込まれたときにユーザー番号をチェック
    function checkUserNumber() {
        const userNumber = getLocalStorage('userNumber');
        if (userNumber) {
            document.getElementById('login').classList.add('hidden');
            document.getElementById('user').classList.remove('hidden');
            loadAssignments(userNumber); // ユーザーの宿題リストをロード
        } else {
            document.getElementById('login').classList.remove('hidden');
        }
    }

    // ログイン処理
    const loginForm = document.getElementById('loginForm');
    loginForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const password = document.getElementById('password').value;
        if (password === 'admin123') { // 管理者パスワード
            document.getElementById('login').classList.add('hidden');
            document.getElementById('admin').classList.remove('hidden');
            loadSubmittedAssignments(); // 提出された宿題をロード
        } else {
            alert('パスワードが違います');
        }
    });

    // ユーザー画面に切り替え
    const userNumberForm = document.getElementById('userNumberForm');
    userNumberForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const userNumber = document.getElementById('userNumber').value;
        setLocalStorage('userNumber', userNumber);
        document.getElementById('login').classList.add('hidden');
        document.getElementById('user').classList.remove('hidden');
        loadAssignments(userNumber); // ユーザーの宿題リストをロード
    });

    // 宿題を追加
    const assignmentForm = document.getElementById('assignmentForm');
    assignmentForm.addEventListener('submit', function(event) {
        event.preventDefault();
        const name = document.getElementById('assignmentName').value;
        const dueDate = document.getElementById('dueDate').value;
        let assignments = getLocalStorage('assignments') || [];
        assignments.push({ name, dueDate });
        setLocalStorage('assignments', assignments);
        assignmentForm.reset();
        alert('宿題を追加しました');
        loadAssignments(); // 管理画面に宿題リストをロード
    });

    // 提出された宿題を表示
    function loadSubmittedAssignments() {
        const submittedList = document.getElementById('submittedList');
        const submittedAssignments = getLocalStorage('submitted') || [];
        submittedList.innerHTML = '';
        submittedAssignments.forEach(submission => {
            const li = document.createElement('li');
            li.textContent = `ユーザー番号 ${submission.userNumber} が "${submission.assignment}" を提出しました。`;
            submittedList.appendChild(li);
        });
    }

    // 宿題リストを表示
    function loadAssignments(userNumber) {
        const assignments = getLocalStorage('assignments') || [];
        const submittedAssignments = getLocalStorage('submitted') || [];
        const submittedSet = new Set(submittedAssignments.map(sub => sub.assignment));

        const assignmentsUl = document.getElementById('assignments');
        assignmentsUl.innerHTML = '';
        const assignmentList = document.getElementById('assignmentList');
        assignmentList.style.display = 'block';

        assignments.forEach(assignment => {
            const li = document.createElement('li');
            li.innerHTML = `
                ${assignment.name} - ${assignment.dueDate} 
                <button ${submittedSet.has(assignment.name) ? 'disabled class="disabled"' : ''} 
                        onclick="submitAssignment('${assignment.name}', '${userNumber}')">
                    ${submittedSet.has(assignment.name) ? '提出済み' : '提出'}
                </button>`;
            assignmentsUl.appendChild(li);
        });
    }

    // 宿題を提出する関数
    function submitAssignment(assignmentName, userNumber) {
        let submittedAssignments = getLocalStorage('submitted') || [];
        submittedAssignments.push({ userNumber, assignment: assignmentName });
        setLocalStorage('submitted', submittedAssignments);
        loadAssignments(userNumber); // 提出後にリストを再読み込みしてボタン状態を更新
    }

    // 管理者のログアウト処理
    const logoutAdmin = document.getElementById('logoutAdmin');
    logoutAdmin.addEventListener('click', function() {
        eraseLocalStorage('userNumber');
        eraseLocalStorage('assignments');
        eraseLocalStorage('submitted');
        document.getElementById('admin').classList.add('hidden');
        document.getElementById('login').classList.remove('hidden');
    });

    // ユーザーのログアウト処理
    const logoutUser = document.getElementById('logoutUser');
    logoutUser.addEventListener('click', function() {
        eraseLocalStorage('userNumber');
        document.getElementById('user').classList.add('hidden');
        document.getElementById('login').classList.remove('hidden');
    });

    // 一定間隔で宿題リストを更新
        setInterval(() => {
    const userNumber = getCookie('userNumber');
    if (userNumber) {
        loadAssignments(userNumber);
     }
        }, 60000); // 1分ごとに更新

    // ページロード時にユーザー番号をチェック
    window.onload = checkUserNumber;
</script>

</script>

</body>
</html>
